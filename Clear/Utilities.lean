import Clear.Abstraction
import Clear.Wheels

namespace Clear.Utilities

open Clear
open Clear.Abstraction
open Clear.State

@[aesop safe apply (rule_sets := [Clear.aesop_spec])]
lemma spec_eq {P P' : State ‚Üí State  ‚Üí Prop} {s‚ÇÄ s‚Çâ : State} :
    (¬¨‚ùì s‚Çâ ‚Üí P s‚ÇÄ s‚Çâ ‚Üí  P' s‚ÇÄ s‚Çâ) ‚Üí Spec P s‚ÇÄ s‚Çâ ‚Üí Spec P' s‚ÇÄ s‚Çâ := by
  intros P'_of_P h
  match s‚ÇÄ with
  | .Ok e œÉ =>
    unfold Spec at *
    simp only at h
    simp only
    intros h'
    exact (P'_of_P h' ‚àò h) h'
  | .Checkpoint j =>
    unfold Spec at *
    simp only at h
    simp only
    exact h
  | .OutOfFuel =>
    unfold Spec at *
    simp only at h
    simp only
    exact h

-- @[aesop safe apply (rule_sets := [Clear.aesop_spec])]
-- lemma collision_spec_eq {P P' : State ‚Üí State  ‚Üí Prop} {s‚ÇÄ s‚Çâ : State} :
--   (¬¨ s‚Çâ.evm.hash_collision ‚Üí Spec P s‚ÇÄ s‚Çâ ‚Üí Spec P' s‚ÇÄ s‚Çâ) ‚Üí CollidingSpec P s‚ÇÄ s‚Çâ ‚Üí CollidingSpec P' s‚ÇÄ s‚Çâ := by
--   unfold CollidingSpec
--   intro S'_of_S
--   split
--   simp
--   intro Spec_of_c c
--   exact S'_of_S c (Spec_of_c c) 

-- @[aesop safe apply (rule_sets := [Clear.aesop_spec])]
-- lemma collision_spec_eq' {P P' : State ‚Üí State  ‚Üí Prop} {s‚ÇÄ s‚Çâ : State} :
--   (¬¨ s‚Çâ.evm.hash_collision ‚Üí ¬¨‚ùì s‚Çâ ‚Üí P s‚ÇÄ s‚Çâ ‚Üí  P' s‚ÇÄ s‚Çâ) ‚Üí CollidingSpec P s‚ÇÄ s‚Çâ ‚Üí CollidingSpec P' s‚ÇÄ s‚Çâ := by
--   intro P'_of_P
--   apply collision_spec_eq
--   intro c
--   apply spec_eq
--   exact P'_of_P c

@[simp]
lemma checkpt_insert_elim {var} {val} {j} : (.Checkpoint j)‚ü¶var ‚Ü¶ val‚üß = .Checkpoint j := by
  simp only [State.insert]

@[simp]
lemma checkpt_setBreak_elim {j} : üíîCheckpoint j = Checkpoint j := by
  simp only [State.setBreak]

def isPure (s‚ÇÄ : State) (s‚ÇÅ : State) : Prop :=
  match s‚ÇÄ, s‚ÇÅ with
  | .Ok e‚ÇÄ _, .Ok e‚ÇÅ _ => e‚ÇÄ = e‚ÇÅ
  | _, _ => True

@[simp]
lemma isPure_insert {s : State} {var val} : isPure s (s‚ü¶var‚Ü¶val‚üß) := by
  unfold State.insert isPure
  aesop

lemma isPure_trans {s‚ÇÄ s‚ÇÅ s‚ÇÇ : State} : isOk s‚ÇÅ ‚Üí isPure s‚ÇÄ s‚ÇÅ ‚Üí isPure s‚ÇÅ s‚ÇÇ ‚Üí isPure s‚ÇÄ s‚ÇÇ := by
  unfold isPure
  match s‚ÇÄ with
  | .OutOfFuel | .Checkpoint _ => simp
  | .Ok e‚ÇÄ œÉ‚ÇÄ =>
    match s‚ÇÇ with
    | .OutOfFuel | .Checkpoint _ => simp
    | .Ok e‚ÇÇ œÉ‚ÇÇ =>
      match s‚ÇÅ with
      | .Ok e‚ÇÅ œÉ‚ÇÅ | .OutOfFuel | .Checkpoint _ => aesop

@[simp]
lemma isPure_rfl {s : State} : isPure s s := by
  unfold isPure; aesop

lemma mload_eq_of_isPure {s s' : State} {a : UInt256} : isOk s ‚Üí isOk s' ‚Üí isPure s s' ‚Üí State.mload a s = State.mload a s' := by
  unfold mload isOk isPure
  cases s <;> cases s' <;> aesop

@[aesop safe norm (rule_sets := [Clear.aesop_spec])]
lemma isPure_ok_insert_of_ok_ok {s s'} {var} {val}
  (h : s.isOk) :
  isPure (s‚ü¶var‚Ü¶val‚üß) s' ‚Üî isPure s s' := by aesop_spec

@[aesop unsafe 5% (rule_sets := [Clear.aesop_spec])]
lemma evm_eq_of_isPure_ok_ok {evm evm'} {vs vs'} (h : isPure (Ok evm vs) (Ok evm' vs')) : evm = evm' := by
  aesop_spec

@[aesop unsafe 5% (rule_sets := [Clear.aesop_spec])]
lemma evm_eq_symm_of_isPure_ok_ok {evm evm'} {vs vs'} (h : isPure (Ok evm vs) (Ok evm' vs')) : evm' = evm := by
  symm
  aesop_spec

def preservesEvm (s‚ÇÄ : State) (s‚ÇÅ : State) : Prop :=
  match s‚ÇÄ, s‚ÇÅ with
  | .Ok e‚ÇÄ _, .Ok e‚ÇÅ _ => Preserved e‚ÇÄ e‚ÇÅ
  | _, _ => True

lemma preservesEvm_of_isOk {s‚ÇÄ s‚ÇÅ : State} (s‚ÇÄ_ok : s‚ÇÄ.isOk) (s‚ÇÅ_ok : s‚ÇÅ.isOk) :
  preservesEvm s‚ÇÄ s‚ÇÅ ‚Üí
  (s‚ÇÄ.evm.account_map = s‚ÇÅ.evm.account_map ‚àß
  s‚ÇÄ.evm.hash_collision = s‚ÇÅ.evm.hash_collision ‚àß
  s‚ÇÄ.evm.execution_env = s‚ÇÅ.evm.execution_env ‚àß
  s‚ÇÄ.evm.keccak_map ‚â§ s‚ÇÅ.evm.keccak_map) := by
  unfold preservesEvm
  cases s‚ÇÄ <;> cases s‚ÇÅ <;> simp at *
  rw [Preserved_def]
  intro _; assumption

lemma Preserved_of_preservesEvm_of_Ok {œÉ‚ÇÄ œÉ‚ÇÅ} {store‚ÇÄ store‚ÇÅ} :
  preservesEvm (Ok œÉ‚ÇÄ store‚ÇÄ) (Ok œÉ‚ÇÅ store‚ÇÅ) ‚Üí Preserved œÉ‚ÇÄ œÉ‚ÇÅ := by
  intro h
  obtain ‚ü®_,_,_,_‚ü© := preservesEvm_of_isOk isOk_Ok isOk_Ok h
  constructor
  all_goals assumption

@[simp]
lemma preservesEvm_rfl {s : State} : preservesEvm s s := by
  unfold preservesEvm
  cases s <;> simp

lemma preservesEvm_trans {s‚ÇÄ s‚ÇÅ s‚ÇÇ} (h : s‚ÇÅ.isOk) :
  preservesEvm s‚ÇÄ s‚ÇÅ ‚Üí preservesEvm s‚ÇÅ s‚ÇÇ ‚Üí preservesEvm s‚ÇÄ s‚ÇÇ := by
  unfold preservesEvm
  cases s‚ÇÄ <;> cases s‚ÇÅ <;> cases s‚ÇÇ <;> simp_all
  exact Preserved.trans

lemma preservesEvm_of_preserved (s‚ÇÄ : State) (s‚ÇÅ : State) :
  Preserved s‚ÇÄ.evm s‚ÇÅ.evm ‚Üí preservesEvm s‚ÇÄ s‚ÇÅ := by
  unfold preservesEvm
  cases s‚ÇÄ <;> cases s‚ÇÅ <;> simp

lemma sload_eq_of_preservesEvm
  {s s' : State} {a : UInt256} (h : s.isOk) (h' : s'.isOk) (hss : preservesEvm s s') :
  s.evm.sload a = s'.evm.sload a := by
  unfold preservesEvm at hss
  unfold isOk at h h'
  cases s <;> cases s' <;> simp [evm] at *
  exact EVMState.sload_eq_of_preserved hss

@[aesop safe norm (rule_sets := [Clear.aesop_spec])]
lemma preservesEvm_of_insert {s‚ÇÄ s‚ÇÅ} {var val} :
  preservesEvm (s‚ÇÄ‚ü¶var ‚Ü¶ val‚üß) s‚ÇÅ ‚Üî preservesEvm s‚ÇÄ s‚ÇÅ := by
  unfold preservesEvm
  cases s‚ÇÄ <;> cases s‚ÇÅ <;> simp
  unfold State.insert; simp
  unfold State.insert; simp

@[aesop safe norm (rule_sets := [Clear.aesop_spec])]
lemma preservesEvm_of_insert' {s‚ÇÄ s‚ÇÅ} {var val} :
  preservesEvm s‚ÇÄ (s‚ÇÅ‚ü¶var ‚Ü¶ val‚üß) ‚Üî preservesEvm s‚ÇÄ s‚ÇÅ := by
  unfold preservesEvm
  cases s‚ÇÄ <;> cases s‚ÇÅ <;> simp
  swap
  unfold State.insert; simp
  unfold State.insert; simp

end Clear.Utilities
