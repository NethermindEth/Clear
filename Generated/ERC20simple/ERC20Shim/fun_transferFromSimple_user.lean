import Clear.ReasoningPrinciple

import Generated.ERC20simple.ERC20Shim.Common.if_668760047301878650
import Generated.ERC20simple.ERC20Shim.checked_sub_uint256
import Generated.ERC20simple.ERC20Shim.checked_add_uint256

import Generated.ERC20simple.ERC20Shim.fun_transferFromSimple_gen


namespace Generated.ERC20simple.ERC20Shim

section

open Clear EVMState Ast Expr Stmt FunctionDefinition State Interpreter ExecLemmas OutOfFuelLemmas Abstraction YulNotation PrimOps ReasoningPrinciple Utilities ERC20Shim.Common Generated.ERC20simple ERC20Shim

def A_fun_transferFromSimple (var var_1 var_2 : Identifier) (var_from var_to var_value : Literal) (s‚ÇÄ s‚Çâ : State) : Prop :=
  let valid := var_value ‚â§ var_from ‚àß
               var_to ‚â§ var_to + var_value ‚àß
               var_from - var_value ‚â§ var_from
  ( valid ‚Üí s‚Çâ = s‚ÇÄ‚ü¶var ‚Ü¶ 1‚üß‚ü¶var_1 ‚Ü¶ var_from - var_value‚üß‚ü¶var_2 ‚Ü¶ var_to + var_value‚üß) ‚àß
  (¬¨valid ‚Üí s‚Çâ = s‚ÇÄ‚ü¶var ‚Ü¶ 0‚üß‚ü¶var_1 ‚Ü¶ var_from‚üß‚ü¶var_2 ‚Ü¶ var_to‚üß)

set_option maxHeartbeats 400000 in
lemma fun_transferFromSimple_abs_of_concrete {s‚ÇÄ s‚Çâ : State} {var var_1 var_2 var_from var_to var_value} :
  Spec (fun_transferFromSimple_concrete_of_code.1 var var_1 var_2 var_from var_to var_value) s‚ÇÄ s‚Çâ ‚Üí
  Spec (A_fun_transferFromSimple var var_1 var_2 var_from var_to var_value) s‚ÇÄ s‚Çâ := by
  unfold fun_transferFromSimple_concrete_of_code 
  rcases s‚ÇÄ with ‚ü®evm, varstore‚ü© | _ | _ <;> [simp only; aesop_spec; aesop_spec]
  apply spec_eq
  rintro h ‚ü®s‚ÇÅ, ‚ü®ss, h‚ÇÇ‚ü©‚ü©
  clr_funargs at ss
  clr_varstore ss,
  rcases h‚ÇÇ with ‚ü®s‚ÇÇ, ‚ü®hs‚ÇÇ, ‚ü®s‚ÇÉ, ‚ü®hs‚ÇÉ, rest‚ü©‚ü©‚ü©‚ü©
  apply Spec_ok_unfold at hs‚ÇÇ
  apply Spec_ok_unfold at ss
  unfold A_if_5295847412656974480 at ss
  clr_varstore ss,
  by_cases eq : (decide (var_from < var_value)).toUInt256 = 0
  ¬∑ simp [eq] at ss
    have hss : State.isOk s‚ÇÅ := by aesop
    apply Spec_ok_unfold at hs‚ÇÉ
    clr_varstore hs‚ÇÇ,
    clr_varstore hs‚ÇÉ,
    dsimp [A_checked_sub_uint256] at hs‚ÇÇ
    -- Here we're forced to consider overflow. 
    by_cases eq‚ÇÅ : s‚ÇÅ["var_from"]!! < s‚ÇÅ["var_from"]!! - (s‚ÇÅ["var_value"]!!)
    ¬∑ -- Underflow ocurred.
      -- Here I spec'd revert as `s.diverge` (i.e. set out of fuel), prolly not smart.
      sorry
    ¬∑ -- No underflow.
      simp [eq‚ÇÅ] at hs‚ÇÇ
      have : State.isOk s‚ÇÇ := by aesop
      dsimp [A_checked_add_uint256] at hs‚ÇÉ
      by_cases eq‚ÇÇ : s‚ÇÇ["var_to"]!! + (s‚ÇÇ["var_value"]!!) < s‚ÇÇ["var_to"]!!
      ¬∑ -- Overflow ocurred.
        -- Reverts????
        sorry
      ¬∑ -- No overflow.
        simp [eq‚ÇÇ] at hs‚ÇÉ
        have : State.isOk s‚ÇÉ := by aesop
        unfold A_fun_transferFromSimple
        intros valid
        -- The only case where valid. I think `eq` is actually "not". It's late.
        have isValid : valid := sorry
        refine' ‚ü®_, (absurd isValid ¬∑)‚ü©
        simp [isValid]
        let s‚ÇÑ := s‚ÇÉ‚ü¶"expr_component_3"‚Ü¶s‚ÇÉ["expr_12"]!!‚üß‚ü¶"var"‚Ü¶s‚ÇÉ["expr_6"]!!‚üß‚ü¶"var_1"‚Ü¶s‚ÇÉ["expr_9"]!!‚üß‚ü¶"var_2"‚Ü¶s‚ÇÉ["expr_12"]!!‚üß
        have hs‚ÇÑ : üßü(s‚ÇÑ) = s‚ÇÑ := by aesop_spec
        have h‚ÇÅs‚ÇÑ : s‚ÇÑ.isOk := by aesop
        rw [hs‚ÇÑ] at rest
        simp [s‚ÇÑ] at rest
        have : ‚àÉ evm varstore, s‚ÇÉ = .Ok evm varstore := by aesop
        rcases this with ‚ü®evm, ‚ü®varstore, hx‚ü©‚ü©
        


        


  -- simp at hw‚ÇÖ
  -- clr_varstore hw‚ÇÖ,


  -- rw [‚Üêss] at hw‚ÇÇ
  -- clr_varstore ss,

  
  
  -- clr_varstore hw‚ÇÇ,
  -- apply Spec_ok_unfold at hw‚ÇÇ

  -- -- clr_varstore
  -- clr_spec at ss
  -- clr_varstore
  -- rcases h‚ÇÇ with ‚ü®h‚ÇÉ, ‚ü®h‚ÇÑ, h‚ÇÖ‚ü©‚ü©
  -- clr_spec at h‚ÇÖ
  
  sorry

end

end Generated.ERC20simple.ERC20Shim
