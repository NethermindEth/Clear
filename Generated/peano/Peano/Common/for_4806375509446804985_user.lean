import Clear.ReasoningPrinciple

import Generated.peano.Peano.Common.if_6183625948864629624
import Generated.peano.Peano.addk

import Generated.peano.Peano.Common.for_4806375509446804985_gen


namespace Peano.Common

set_option autoImplicit false

section

open Clear EVMState Ast Expr Stmt FunctionDefinition State Interpreter ExecLemmas OutOfFuelLemmas Abstraction YulNotation PrimOps ReasoningPrinciple Utilities Peano.Common Generated.peano Peano

def ACond_for_4806375509446804985 (s‚ÇÄ : State) : Literal := 1 
def APost_for_4806375509446804985 (s‚ÇÄ s‚Çâ : State) : Prop := s‚Çâ = s‚ÇÄ‚ü¶"k"‚Ü¶(s‚ÇÄ["k"]!!) - 1‚üß
def ABody_for_4806375509446804985 (s‚ÇÄ s‚Çâ : State) : Prop := s‚Çâ = if s‚ÇÄ["k"]!! = 0 then üíî s‚ÇÄ else s‚ÇÄ‚ü¶"y"‚Ü¶(s‚ÇÄ["y"]!!) + (s‚ÇÄ["x"]!!)‚üß
def AFor_for_4806375509446804985 (s‚ÇÄ s‚Çâ : State) : Prop := (s‚Çâ["y"]!!) = (s‚ÇÄ["y"]!!) + (s‚ÇÄ["x"]!!) * (s‚ÇÄ["k"]!!) ‚àß isPure s‚ÇÄ s‚Çâ ‚àß s‚Çâ.isOk

lemma for_4806375509446804985_cond_abs_of_code {s‚ÇÄ fuel} : eval fuel for_4806375509446804985_cond (s‚ÇÄ) = (s‚ÇÄ, ACond_for_4806375509446804985 (s‚ÇÄ)) := by
  unfold eval ACond_for_4806375509446804985
  aesop_spec

lemma for_4806375509446804985_concrete_of_post_abs {s‚ÇÄ s‚Çâ : State} :
  Spec for_4806375509446804985_post_concrete_of_code s‚ÇÄ s‚Çâ ‚Üí
  Spec APost_for_4806375509446804985 s‚ÇÄ s‚Çâ := by
  unfold for_4806375509446804985_post_concrete_of_code APost_for_4806375509446804985 Spec
  aesop_spec

lemma for_4806375509446804985_concrete_of_body_abs {s‚ÇÄ s‚Çâ : State} :
  Spec for_4806375509446804985_body_concrete_of_code s‚ÇÄ s‚Çâ ‚Üí
  Spec ABody_for_4806375509446804985 s‚ÇÄ s‚Çâ := by
  unfold for_4806375509446804985_body_concrete_of_code ABody_for_4806375509446804985 A_if_6183625948864629624 Spec
  aesop_spec

lemma AZero_for_4806375509446804985 : ‚àÄ s‚ÇÄ, isOk s‚ÇÄ ‚Üí ACond_for_4806375509446804985 (üëå s‚ÇÄ) = 0 ‚Üí AFor_for_4806375509446804985 s‚ÇÄ s‚ÇÄ := by
  unfold ACond_for_4806375509446804985 
  aesop_spec

lemma AOk_for_4806375509446804985 : ‚àÄ s‚ÇÄ s‚ÇÇ s‚ÇÑ s‚ÇÖ, isOk s‚ÇÄ ‚Üí isOk s‚ÇÇ ‚Üí ¬¨ ‚ùì s‚ÇÖ ‚Üí ¬¨ ACond_for_4806375509446804985 s‚ÇÄ = 0 ‚Üí ABody_for_4806375509446804985 s‚ÇÄ s‚ÇÇ ‚Üí APost_for_4806375509446804985 s‚ÇÇ s‚ÇÑ ‚Üí Spec AFor_for_4806375509446804985 s‚ÇÑ s‚ÇÖ ‚Üí AFor_for_4806375509446804985 s‚ÇÄ s‚ÇÖ
:= by
  unfold AFor_for_4806375509446804985 APost_for_4806375509446804985 ABody_for_4806375509446804985
  intros s‚ÇÄ s‚ÇÇ s‚ÇÑ s‚ÇÖ h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ h‚ÇÖ h‚ÇÜ h‚Çá
  rcases s‚ÇÑ with ‚ü®evm, vs‚ü© | _ | v <;> [skip; aesop_spec; skip]
  ¬∑ clr_spec at h‚Çá
    split_ands <;> [rw [h‚ÇÜ] at h‚Çá; aesop_spec; tauto]
    ¬∑ split_ifs at h‚ÇÖ
      ¬∑ aesop_spec
      ¬∑ simp only [h‚Çá, h‚ÇÖ] at *
        clr_varstore,
        ring
  ¬∑ have : isOk (s‚ÇÇ‚ü¶"k"‚Ü¶s‚ÇÇ["k"]!! - 1‚üß) := by aesop
    simp [h‚ÇÜ.symm] at this

lemma AContinue_for_4806375509446804985 : ‚àÄ s‚ÇÄ s‚ÇÇ s‚ÇÑ s‚ÇÖ, isOk s‚ÇÄ ‚Üí isContinue s‚ÇÇ ‚Üí ¬¨ ACond_for_4806375509446804985 s‚ÇÄ = 0 ‚Üí ABody_for_4806375509446804985 s‚ÇÄ s‚ÇÇ ‚Üí Spec APost_for_4806375509446804985 (üßüs‚ÇÇ) s‚ÇÑ ‚Üí Spec AFor_for_4806375509446804985 s‚ÇÑ s‚ÇÖ ‚Üí AFor_for_4806375509446804985 s‚ÇÄ s‚ÇÖ := by
  unfold ABody_for_4806375509446804985
  aesop_spec

lemma ABreak_for_4806375509446804985 : ‚àÄ s‚ÇÄ s‚ÇÇ, isOk s‚ÇÄ ‚Üí isBreak s‚ÇÇ ‚Üí ¬¨ ACond_for_4806375509446804985 s‚ÇÄ = 0 ‚Üí ABody_for_4806375509446804985 s‚ÇÄ s‚ÇÇ ‚Üí AFor_for_4806375509446804985 s‚ÇÄ (üßüs‚ÇÇ) := by
  unfold ABody_for_4806375509446804985 AFor_for_4806375509446804985
  aesop_spec

lemma ALeave_for_4806375509446804985 : ‚àÄ s‚ÇÄ s‚ÇÇ, isOk s‚ÇÄ ‚Üí isLeave s‚ÇÇ ‚Üí ¬¨ ACond_for_4806375509446804985 s‚ÇÄ = 0 ‚Üí ABody_for_4806375509446804985 s‚ÇÄ s‚ÇÇ ‚Üí AFor_for_4806375509446804985 s‚ÇÄ s‚ÇÇ := by
  unfold ABody_for_4806375509446804985
  aesop_spec

end

end Peano.Common
